version: 0.2

# 1. Environment Variables (REPLACE THESE PLACEHOLDERS)
env:
  variables:
    AWS_REGION: "ap-south-1"   # Your AWS Region (e.g., us-east-1)
    # ECR URI includes your AWS Account ID and region, e.g., 123456789012.dkr.ecr.ap-south-1.amazonaws.com
    ECR_URI: "<961581626265>.dkr.ecr.<YOUR_AWS_REGION>.amazonaws.com"
    ECR_REPO_NAME: "springboot-restful-webservices" # The name of your ECR repository
    EKS_CLUSTER_NAME: "Chinna_cluster1" # The name of your EKS cluster

phases:
  install:
    # Set up Java and install kubectl CLI
    runtime-versions:
      java: corretto17
    commands:
      - echo "Installing kubectl"
      - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
      - install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

  pre_build:
    commands:
      # Log in to ECR (Requires ECR permissions on the CodeBuild role)
      - echo "Logging into ECR..."
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_URI

  build:
    commands:
      # 1. Build the Spring Boot JAR file
      - echo "Building Spring Boot project with Maven"
      - mvn clean install -DskipTests

      # 2. Build the Docker Image using the Dockerfile
      - echo "Building Docker Image"
      - docker build -t $ECR_REPO_NAME:$CODEBUILD_RESOLVED_COMMIT_ID .

      # 3. Tag the image for ECR push
      - docker tag $ECR_REPO_NAME:$CODEBUILD_RESOLVED_COMMIT_ID $ECR_URI/$ECR_REPO_NAME:$CODEBUILD_RESOLVED_COMMIT_ID

  post_build:
    commands:
      - echo "Pushing to ECR and Deploying to EKS"

      # 1. Push the Docker Image to ECR
      - docker push $ECR_URI/$ECR_REPO_NAME:$CODEBUILD_RESOLVED_COMMIT_ID

      # 2. Update Kubeconfig to allow kubectl to connect to the EKS cluster
      # (Requires EKS/STS permissions on the CodeBuild role)
      - aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

      # 3. Dynamically replace the image tag in your deployment file
      # This updates your k8s/deployment.yaml with the new image ID from this build
      - sed -i "s|<PLACEHOLDER_TAG>|$CODEBUILD_RESOLVED_COMMIT_ID|" k8s/deployment.yaml

      # 4. Deploy the updated manifest to EKS
      # This replaces the need for the separate "Deploy to Amazon EKS" action in CodePipeline
      - kubectl apply -f k8s/deployment.yaml
      - echo "Deployment complete for $EKS_CLUSTER_NAME."

artifacts:
  # The artifacts stage is not strictly needed for deployment, but good for diagnostics
  files:
    - target/*.jar
    - k8s/deployment.yaml # Include the updated manifest for review